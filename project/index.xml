<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Lost in Computation</title>
    <link>https://mlxd.github.io/project/</link>
    <description>Recent content in Projects on Lost in Computation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Lee James O&#39;Riordan (mlxd)</copyright>
    <lastBuildDate>Wed, 18 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mlxd.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ExaFEL</title>
      <link>https://mlxd.github.io/project/exafel/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/project/exafel/</guid>
      <description>STRUMPACK vs EIGEN for Levenberg-Marquardt nonlinear least squares optimisation The following documentation and data formed part of the work I carried out at LBNL from 2017 to 2018. The project described herein follows the integration of the STRUMPACK sparse linear solver library into CCTBX. Comparing solver&amp;rsquo;s various backends with EIGEN&amp;rsquo;s gives an indication of the applicability of each individual solver to the given problem (Levenberg-Marquardt nonlinear least-squares minimisation) to the observed data.</description>
    </item>
    
    <item>
      <title>GPUE</title>
      <link>https://mlxd.github.io/project/gpue/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/project/gpue/</guid>
      <description>GPUE represents the culmination of work by myself and James Schloss into developing a high performance quantum dynamics simulator for investigating superfluid dynamics of Bose-Einstein condensates. This solver allows for studies of 2D and 3D dynamics, quantum vortices, arbitrary potential geometries, artificial gauge fields, as well as a variety of additional features. The solver makes use of CUDA libraries and custom kernels to enable GPUE to simulate quantum systems faster than competing suites or libraries, as well as Python routines for post-processing and data analysis.</description>
    </item>
    
  </channel>
</rss>