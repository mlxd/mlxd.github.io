<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lost in Computation</title>
    <link>https://mlxd.github.io/post/</link>
    <description>Recent content in Posts on Lost in Computation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Lee James O&#39;Riordan (mlxd)</copyright>
    <lastBuildDate>Sun, 14 Jan 2018 13:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mlxd.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Non-equilibrium vortex dynamics in rapidly rotating Bose–Einstein condensates: Background</title>
      <link>https://mlxd.github.io/post/thesis_background/</link>
      <pubDate>Sun, 14 Jan 2018 13:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/thesis_background/</guid>
      <description>NOTE: The following format was generated by converting the LaTeX format to mMarkdown with pandoc. The referencing has not converted, images are not present, and errors may exist.
Background Ultracold atoms Cooling of atomic gases One of the major advances in experimental physics towards creating matter in extreme situations has been the cooling of trapped atoms to temperatures near absolute zero. This feat resulted from the pioneering work of C.</description>
    </item>
    
    <item>
      <title>Non-equilibrium vortex dynamics in rapidly rotating Bose–Einstein condensates: Introduction</title>
      <link>https://mlxd.github.io/post/thesis_intro/</link>
      <pubDate>Sun, 14 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/thesis_intro/</guid>
      <description>Introduction The purpose of this work is to understand the dynamics of rapidly rotating Bose–Einstein condensates subjected to perturbations, and to develop techniques to control and engineer specific non-equilibrium states. While it is possible to derive some analytical solutions for rapidly rotating condensates (e.g. lowest Landau level approach), such solutions are rare. This thesis concentrates on the numerical solutions of the Gross–Pitaevskii equation, and the resulting dynamics within this framework.</description>
    </item>
    
    <item>
      <title>Non-equilibrium vortex dynamics in rapidly rotating Bose–Einstein condensates: Abstract</title>
      <link>https://mlxd.github.io/post/thesis_abstract/</link>
      <pubDate>Sun, 14 Jan 2018 11:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/thesis_abstract/</guid>
      <description>Abstract Non-equilibrium vortex dynamics in rapidly rotating Bose–Einstein condensates This body of work examines the non-equilibrium dynamics of vortex lattice carrying Bose–Einstein condensates. We solve the mean-field Gross–Pitaevskii equation for a two-dimensional pancake geometry, in the co-rotating frame within the limit of high rotation frequencies. The condensate responds to this by creating a large periodic lattice of vortices with 6-fold triangular symmetry. By applying two distinct perturbations to this lattice, we examine the resulting effects on the vortices during time evolution.</description>
    </item>
    
    <item>
      <title>Introduction to GPUE: Part 1</title>
      <link>https://mlxd.github.io/post/2015-09-18-quantums/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2015-09-18-quantums/</guid>
      <description>Bose$-$Einstein condensation This will be a hand-waiving introduction to Bose-Einstein condensate theory. I&amp;rsquo;ll begin by introducing what is a Bose-Einstein condensate, followed by how we model it (hint: we use the Gross-Pitaevskii equation). For more detailed derivations, see Pethick and Smith [ISBN: 978-0521846516] or Pitaevskii and Stringari [ISBN: 978-0198507192].
Again, this is another work in progress, so expect me to continually dump my thoughts here and on subsequent posts.</description>
    </item>
    
    <item>
      <title>Introduction to GPUE: Part 2</title>
      <link>https://mlxd.github.io/post/2015-09-20-quantum-vortices/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2015-09-20-quantum-vortices/</guid>
      <description>Quantum vortices Consider, if you will, a bucket of water. We can also do this with a closed bottle of water, to prevent from getting wet, but let&amp;rsquo;s assume we have a bucket. We drop a spoon/stick/paddle in there, and begin to draw a circle, stirring the water. If the item is removed, the water continues to rotate, gradually slowing down before coming to a halt. Let us now assume that the water is spinning quickly, such that a hole develops in the centre.</description>
    </item>
    
    <item>
      <title>Introduction to GPUE: Part 3</title>
      <link>https://mlxd.github.io/post/2015-09-22-tdsim/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2015-09-22-tdsim/</guid>
      <description>Time dependent simulations I will focus on the pseudo-spectral Fourier split operator (or split step) method.
Firsly, we need to quantised position space by making a grid over a specific range of position values. Assume $-10$ $\mu$m to $+10$ $\mu$m, giving a grid divided into $xDim=2^8$ equispaced elements. Let us call this grid $\mathbf{x}$, and the maximum value $x_\textrm{max}$. The following Julia code will carry out the above:
xDim = 2^8; # The resolution of your grid.</description>
    </item>
    
    <item>
      <title>Permutations of n-D data</title>
      <link>https://mlxd.github.io/post/2017-09-04-nd-data/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2017-09-04-nd-data/</guid>
      <description>Something I have been (occasionally) thinking about for quite a long time is the means to manipulate high-dimensional data-sets (dense grids, specifically), and do so efficiently. Namely, I wish to make the data along any specific orthgonal basis direction to become adjacent in memory by strides of the length of samples along that axis.
The reason for this? To allow for optimal vectorisation and caching of data when performing computations. Take for example a GPU: if we put data on GPU memory we want to access and manipulate it in chunks given by the chosen thread-size.</description>
    </item>
    
    <item>
      <title>FFTs over time and space... and devices</title>
      <link>https://mlxd.github.io/post/2017-07-11-ffts/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2017-07-11-ffts/</guid>
      <description>The following article is a work in progress, and will be continually updated over time. I&#39;ll issue a RELEASE tag or similar when everything has been finished.
Q. How do available FFT routines compare over different libraries and accelerator hardwares? This is something I have wondered for sometime, though it can be difficult for an apples-to-apples comparison. I will consider the above question in relation to the following plan:</description>
    </item>
    
    <item>
      <title>Overdue todo</title>
      <link>https://mlxd.github.io/post/2016-05-11-todo/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2016-05-11-todo/</guid>
      <description>Granted I have not published any of the articles I am writing since my initial post, they are still in the works. Unfortunately, they will also need to wait until my thesis has been written and published (as some of them will be used therein).
As a snapshot, I will intend to discuss the following topics:
 GPU acceleration of Schrodinger-like problems using GPUE Implementing the pseudospectral Fourier split-operator method for time dependent simulations An easy introduction to simulation of Bose-Einstein condensates (BECs) Numerically solving the Bogoliubov equations for BEC fun Playing with vortices in a BEC  However, do not hold your breath for these&amp;hellip;</description>
    </item>
    
    <item>
      <title>Questions to expand upon</title>
      <link>https://mlxd.github.io/post/2017-07-11-questions/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2017-07-11-questions/</guid>
      <description>Questions to consider  What is the optimal choice of FFTs over competing HPC software and device architectures for quantum dynamics using pseduospectral methods? Do space filling curves have a performance impact on multidimensional data when performing FFTs along the i-th dimension? Is there an optimal way to permute an n-D data set so that the elements along a specific basis direction are linear in memory? Reasons for this are optimal data access when performing operations, allowing for higher cache hits (such as with FFTs on GPUs are an example).</description>
    </item>
    
    <item>
      <title>Initiali[sz]e</title>
      <link>https://mlxd.github.io/post/2015-10-17-init/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlxd.github.io/post/2015-10-17-init/</guid>
      <description>(Original post 2015-10-17; updated 2017-01-18)
As this is my first post I will keep things simple. Unless otherwise specified, I will be using the following as my default tools.
Editors/IDE/Cool things  ViM (pretty much everything code related) Atom (Markdown, text files, and the like) Jupyter (IPython, IJulia)  Languages [toolchains]  C/C++ [g++, icc] CUDA/OpenCL [nvcc, icc] Python MATLAB Julia Mathematica Bash/Zsh English (occasionally)  OS  Arch Linux CentOS 7 OS X 10.</description>
    </item>
    
  </channel>
</rss>